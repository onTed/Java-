HashMap总结

HashMap底层数据结构是数组+链表(红黑树)
put()-->HashMap存键值对
get()-->HashMap取键值对
两个重要的参数：
capacity：容量是HashMap中桶的个数，一般为2的n次方的整数
load factor：负载因子，填满程度的最大比例。
当HashMap中实际元素个数大于capacity与load factor的乘积，则HashMap就需要调整桶的大小，调整后的桶的大小为原来的两倍。

put()方法大致思路：
1.对key的hashCode()做hash,然后再计算下表index
2.如果没有hash碰撞则直接放在桶bucket中
3.如果碰撞了,则以链表的形式存在桶中
4.如果碰撞导致链表过长(大于等于TREEIFY_THRESHOLD),就把链表转成红黑树
5.如果key值已经存在则替换旧的value(保证key的唯一性)
6.如果bucket满了(超过load factor*current capacity)，就要resize

以Entry[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可得到数组下标。
插入元素时，如果两条Key落在同一个桶（比如哈希值1和17取模16后都属于第一个哈希桶），我们称之为哈希冲突。
JDK的做法是链表法，Entry用一个next属性实现多个Entry以单向链表存放。查找哈希值为17的key时，先定位到哈希桶，然后链表遍
历桶里所有元素，逐个比较其Hash值然后key值。
在JDK8里，新增默认为8的阈值，当一个桶里的Entry超过閥值，就不以单向链表而以红黑树来存放以加快Key的查找速度。
当然，最好还是桶里只有一个元素，不用去比较。所以默认当Entry数量达到桶数量的75%时，哈希冲突已比较严重，就会成倍扩容桶
数组，并重新分配所有原来的Entry。扩容成本不低，所以也最好有个预估值。
取模用与操作 hash&(arrayLength-1) 会比较快，所以数组的大小永远是2的N次方， 你随便给一个初始值比如17会转为32。默
认第一次放入元素时的初始值是16。
iterator（）时顺着哈希桶数组来遍历，看起来是个乱序


